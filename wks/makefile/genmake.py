#!/usr/bin/env python
#coding=utf-8

import os,sys

CC = 'g++'
CC_FLAGS = '-Wall -g'

SRC_DIR = '../../test'
INCLUDE_PATH = ['../..']
OBJ_DIR = './output'
TARGET = OBJ_DIR + '/test'

def get_allsrcs(root, ret):
    ''' 获取所有原代码文件 '''
    if os.path.isfile(root):
        if root.lower().endswith('.cpp'):
            ret.append(root)
        return
    else:
        for e in os.listdir(root):
            get_allsrcs(os.path.join(root, e), ret)

def map_src_to_obj(src, src_root, obj_root):
    ''' 源文件对应的目标文件 '''
    rel_obj = os.path.relpath(src, src_root)[:-4] + '.o'
    return os.path.join(obj_root, rel_obj)


def main():
    ret = ''

    includes = ' '.join(map(lambda x:'-I'+x, INCLUDE_PATH))

    ret += '#!/usr/bin/env make\n'
    ret += '# this file is auto-generated by genmake\n\n'
    ret += 'CC=' + CC + '\n'
    ret += 'CC_FLAGS=' + includes + ' ' + CC_FLAGS + '\n\n'
    ret += 'OBJ_DIR=' + OBJ_DIR + '\n'
    ret += 'TARGET=' + TARGET + '\n\n'

    # 虚拟目标
    ret += 'all: $(TARGET)\n\n'
    ret += 'clean:\n' '\trm -rf $(OBJ_DIR)\n\n'
    ret += 'rebuild: clean all\n\n'
    ret += 'run: $(TARGET)\n' '\t$(TARGET)\n\n'

    # 所有的依赖关系
    all_srcs, all_objs = [], []
    get_allsrcs(SRC_DIR, all_srcs)
    for e in all_srcs:
        p = os.popen(CC + ' -MM ' + includes + ' ' + CC_FLAGS + ' ' + e)
        dep = p.read()

        obj = map_src_to_obj(e, SRC_DIR, OBJ_DIR)
        all_objs.append(obj)
        dep = obj + dep[dep.index(':'): ]

        ret += dep
        ret += '\tmkdir -p ' + os.path.split(obj)[0] + '\n'
        ret += '\t$(CC) $(CC_FLAGS) $< -o $@\n\n'

    # 最终目标
    ret += '$(TARGET): ' + ' '.join(all_objs) + '\n'
    ret += '\t$(CC) -o $@ $^\n'

    return ret

if __name__ == '__main__':
    output = './makefile'
    if len(sys.argv) > 1:
        output = sys.argv[1]

    lines = main()
    print lines
    with open(output, 'w') as f:
        f.write(lines)

