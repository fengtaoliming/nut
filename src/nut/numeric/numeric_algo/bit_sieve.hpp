/**
 * @file -
 * @author jingqi
 * @date 2013-01-29
 * @last-edit 2015-01-06 22:42:06 jingqi
 * @brief
 */

#ifndef ___HEADFILE_B3D1D8B6_CD77_4FB3_A62E_A83D30BA0451_
#define ___HEADFILE_B3D1D8B6_CD77_4FB3_A62E_A83D30BA0451_

#include "../big_integer.hpp"

namespace nut
{

extern bool miller_rabin(const BigInteger& n, unsigned s);

/**
 * A simple bit sieve used for finding prime number candidates. Allows setting
 * and clearing of bits in a storage array. The size of the sieve is assumed to
 * be constant to reduce overhead. All the bits of a new BitSieve are zero, and
 * bits are removed from it by setting them.
 *
 * To reduce storage space and increase efficiency, no even numbers are
 * represented in the sieve (each bit in the sieve represents an odd number).
 * The relationship between the index of a bit and the number it represents is
 * given by
 * N = offset + (2*index + 1);
 * Where N is the integer represented by a bit in the sieve, offset is some
 * even integer offset indicating where the sieve begins, and index is the
 * index of a bit in the sieve array.
 *
 * @see     BigInteger
 * @version 1.13, 11/07/08
 * @author  Michael McCloskey
 * @since   1.3
 */
template <typename VOID_T>
class _BitSieve
{
    /**
     * Stores the bits in this BitSieve.
     */
    int64_t *m_bits;
    int m_bits_cap;

    /**
     * Length is how many bits this sieve holds.
     */
    int m_length;

    /**
     * A small sieve used to filter out multiples of small primes in a search
     * sieve.
     */
    static _BitSieve<VOID_T> s_small_sieve;

    /**
     * Construct a "small sieve" with a base of 0.  This constructor is
     * used internally to generate the set of "small primes" whose multiples
     * are excluded from sieves generated by the main (package private)
     * constructor, BitSieve(BigInteger base, int search_len).  The length
     * of the sieve generated by this constructor was chosen for performance;
     * it controls a tradeoff between how much time is spent constructing
     * other sieves, and how much time is wasted testing composite candidates
     * for primality.  The length was chosen experimentally to yield good
     * performance.
     */
    _BitSieve()
    {
        m_length = 150 * 64;
        m_bits_cap = unit_index(m_length - 1) + 1;
        m_bits = new int64_t[m_bits_cap];
        ::memset(m_bits, 0, m_bits_cap * sizeof(int64_t));

        // Mark 1 as composite
        set(0);
        int next_index = 1;
        int next_prime = 3;

        // Find primes and remove their multiples from sieve
        do
        {
            sieve_single(m_length, next_index + next_prime, next_prime);
            next_index = sieve_search(m_length, next_index + 1);
            next_prime = 2*next_index + 1;
        } while((next_index > 0) && (next_prime < m_length));
    }

public:
    /**
     * Construct a bit sieve of search_len bits used for finding prime number
     * candidates. The new sieve begins at the specified base, which must
     * be even.
     */
    _BitSieve(const BigInteger& base, int search_len)
    {
        /*
         * Candidates are indicated by clear bits in the sieve. As a candidates
         * nonprimality is calculated, a bit is set in the sieve to eliminate
         * it. To reduce storage space and increase efficiency, no even numbers
         * are represented in the sieve (each bit in the sieve represents an
         * odd number).
         */
        m_bits_cap = unit_index(search_len-1) + 1;
        m_bits = new int64_t[m_bits_cap];
        ::memset(m_bits, 0, m_bits_cap * sizeof(int64_t));
        m_length = search_len;
        int start = 0;

        int step = s_small_sieve.sieve_search(s_small_sieve.m_length, start);
        int converted_step = (step *2) + 1;

        // Construct the large sieve at an even offset specified by base
        do
        {
            // Calculate base mod converted_step
        	start = (int) (base % converted_step).llong_value();

            // Take each multiple of step out of sieve
            start = converted_step - start;
            if (start%2 == 0)
                start += converted_step;
            sieve_single(search_len, (start-1)/2, converted_step);

            // Find next prime from small sieve
            step = s_small_sieve.sieve_search(s_small_sieve.m_length, step+1);
            converted_step = (step *2) + 1;
        } while (step > 0);
    }

    ~_BitSieve()
    {
        if (NULL != m_bits)
            delete[] m_bits;
        m_bits = NULL;
        m_bits_cap = 0;
    }

private:
    /**
     * Given a bit index return unit index containing it.
     */
    static int unit_index(int bit_index)
    {
        return (int)(((unsigned)bit_index) >> 6);
    }

    /**
     * Return a unit that masks the specified bit in its unit.
     */
    static int64_t bit(int bit_index)
    {
        return ((int64_t) 1) << (bit_index & ((1<<6) - 1));
    }

    /**
     * Get the value of the bit at the specified index.
     */
    bool get(int bit_index)
    {
        int ui = unit_index(bit_index);
        return ((m_bits[ui] & bit(bit_index)) != 0);
    }

    /**
     * Set the bit at the specified index.
     */
    void set(int bit_index)
    {
        int ui = unit_index(bit_index);
        m_bits[ui] |= bit(bit_index);
    }

    /**
     * This method returns the index of the first clear bit in the search
     * array that occurs at or after start. It will not search past the
     * specified limit. It returns -1 if there is no such clear bit.
     */
    int sieve_search(int limit, int start)
    {
        if (start >= limit)
            return -1;

        int index = start;
        do
        {
            if (!get(index))
                return index;
            index++;
        } while(index < limit-1);
        return -1;
    }

    /**
     * Sieve a single set of multiples out of the sieve. Begin to remove
     * multiples of the specified step starting at the specified start index,
     * up to the specified limit.
     */
    void sieve_single(int limit, int start, int step)
    {
        while(start < limit)
        {
            set(start);
            start += step;
        }
    }

public:
    /**
     * Test probable primes in the sieve and return successful candidates.
     */
    BigInteger retrieve(BigInteger init_value, int certainty)
    {
        // Examine the sieve one long at a time to find possible primes
        int offset = 1;
        for (int i = 0; i < m_bits_cap; ++i)
        {
            uint64_t next_long = ~m_bits[i];
            for (int j = 0; j < 64; ++j)
            {
                if ((next_long & 1) == 1)
                {
                    BigInteger candidate = init_value + offset;
                    if (miller_rabin(candidate, certainty))
                        return candidate;
                }
                next_long >>= 1;
                offset += 2;
            }
        }
        return BigInteger(0);
    }
};

template <typename VOID_T>
_BitSieve<VOID_T> _BitSieve<VOID_T>::s_small_sieve;

typedef _BitSieve<void> BitSieve;

}

#endif
